<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on Playing with Projections</title>
    <link>/</link>
    <description>Recent content in Overview on Playing with Projections</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>By Thomas Coopman - Michel Grootjans</copyright>
    <lastBuildDate>Fri, 16 Aug 2019 19:32:11 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overview of the challenges</title>
      <link>/challenge/list/</link>
      <pubDate>Sat, 17 Aug 2019 10:10:46 +0200</pubDate>
      
      <guid>/challenge/list/</guid>
      <description>We recommend you to start with the basic challenges and do them ordered. Once you feel comfortable doing those you can pick one of the advanced challenges.
Basic The basic challenges should be done in order.
 Count the number of events Count the number of registered players Count the number of players registered per month Find the most popular quizzes Look for inactive players  Advanced Not all the advanced challenges have to be done in order.</description>
    </item>
    
    <item>
      <title>Eventstore API</title>
      <link>/doc/api/</link>
      <pubDate>Sat, 17 Aug 2019 09:51:06 +0200</pubDate>
      
      <guid>/doc/api/</guid>
      <description>As an exercise we have hugely simplfied the API while trying to find the relevant details necessary to implement this workshop.
The API for every language looks the same. It has an EventStore with one method replay. The replay method takes two arguments: the streamname and a projection. And a projection is a function that takes an event, does something with it and doesn&amp;rsquo;t return anything.
In pseudo code an example could look like this:</description>
    </item>
    
    <item>
      <title>Create a top ranking per month</title>
      <link>/challenge/top_player_of_the_month/</link>
      <pubDate>Sat, 17 Aug 2019 09:46:44 +0200</pubDate>
      
      <guid>/challenge/top_player_of_the_month/</guid>
      <description> player who won the most different quizzes (not games!) and is not a bot.
Domain If a player plays a quiz 3 times in a mont and wins each time, the quiz is only counted once.
Answer click to reveal answer TODO   </description>
    </item>
    
    <item>
      <title>Determine the high score of a quiz</title>
      <link>/challenge/who_has_the_quiz_high_score/</link>
      <pubDate>Sat, 17 Aug 2019 09:46:36 +0200</pubDate>
      
      <guid>/challenge/who_has_the_quiz_high_score/</guid>
      <description> This answer depends on Look for bots and Who won this game
The high score is the maximum score a quiz over all played games of that quiz. But, only the score of the first time a player played this quiz counts towards the high score. So when a player gets a higher score on a second play, this score doesn&amp;rsquo;t count.
Answer click to reveal answer TODO   </description>
    </item>
    
    <item>
      <title>Determine the winner of a game</title>
      <link>/challenge/who_won_the_game/</link>
      <pubDate>Sat, 17 Aug 2019 09:46:36 +0200</pubDate>
      
      <guid>/challenge/who_won_the_game/</guid>
      <description>The winner of a game is the player with the most points in total for the game. Points are scored per question. To calculate points for a question, calculate 1000 * ( 1 - ( [response time] / 240 )) and round this number down.
In case that multiple players have the same amount of points, there are multiple winners.
Bonus Ofcourse, we want to remove the bots from the winners.</description>
    </item>
    
    <item>
      <title>Look for bots</title>
      <link>/challenge/look_for_bots/</link>
      <pubDate>Sat, 17 Aug 2019 09:46:26 +0200</pubDate>
      
      <guid>/challenge/look_for_bots/</guid>
      <description> We have the feeling that we might have cheaters in our system. So we would like you to find the cheaters. First it might be a good idea to think about how we might detect bots.
When you have some ideas, try to write a projection to detect the bots.
Answer click to reveal answer TODO   Spoilers SPOILER ALERT Here are some ways to detect bots:
 they always answer correctly they answer super fast they play way too many games    </description>
    </item>
    
    <item>
      <title>Verify our marketing campaign</title>
      <link>/challenge/verify_marketing_campaign/</link>
      <pubDate>Sat, 17 Aug 2019 09:46:17 +0200</pubDate>
      
      <guid>/challenge/verify_marketing_campaign/</guid>
      <description> The event stream doesn&amp;rsquo;t contain a marketing campaign yet, so go pick a different challenge.
Answer click to reveal answer TODO   </description>
    </item>
    
    <item>
      <title>Find inactive players</title>
      <link>/challenge/find_inactive_players/</link>
      <pubDate>Sat, 17 Aug 2019 09:46:05 +0200</pubDate>
      
      <guid>/challenge/find_inactive_players/</guid>
      <description> An inactive player is a player that has either played less than 1 game in 1 month, or has created less than 1 quiz in 1 month for a given month.
Tip If you feel like you know how to do the basic projections, it&amp;rsquo;s ok to skip this challenge and go on to the advanced challenges.
Answer click to reveal answer TODO   </description>
    </item>
    
    <item>
      <title>Find the most popular quizzes</title>
      <link>/challenge/find_most_popular_quizzes/</link>
      <pubDate>Sat, 17 Aug 2019 09:45:38 +0200</pubDate>
      
      <guid>/challenge/find_most_popular_quizzes/</guid>
      <description>The most popular quiz is the quiz that has most played games. We are looking for the top 10 of the most popular quizzes per month. The answer must contain the name and the id of the quiz.
Domain question What does the most played quizzes really mean? (see Spoilers)
Bonus question Also provide the total most popular quiz (when you have the time)
Tip Try to use your projection from the first part of the challenge, rather than implement a new projection.</description>
    </item>
    
    <item>
      <title>Count the number of registered players per month</title>
      <link>/challenge/count_number_of_registered_players_per_month/</link>
      <pubDate>Sat, 17 Aug 2019 09:45:26 +0200</pubDate>
      
      <guid>/challenge/count_number_of_registered_players_per_month/</guid>
      <description>This challenge builds on top of the previous one. You should be able to group player registrations per month. The expected output looks like this:
TODO
Tip The events are ordered on time, so you should not do any ordering yourself.
Answer click to reveal answer TODO   Next challenge</description>
    </item>
    
    <item>
      <title>Count the number of registered players</title>
      <link>/challenge/count_number_of_registered_players/</link>
      <pubDate>Sat, 17 Aug 2019 09:42:20 +0200</pubDate>
      
      <guid>/challenge/count_number_of_registered_players/</guid>
      <description>This should also be self-explanatory. We&amp;rsquo;d like to know how many players have registered in total.
Answer click to reveal answer TODO   Next challenge</description>
    </item>
    
    <item>
      <title>Count the total number of events</title>
      <link>/challenge/count_number_of_events/</link>
      <pubDate>Sat, 17 Aug 2019 09:40:38 +0200</pubDate>
      
      <guid>/challenge/count_number_of_events/</guid>
      <description>This should be self-explanatory. Most repository technologies start with this example implemented.
Make it run, then validate your answer.
Answer Click to reveal answer TODO   Next challenge</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>/doc/domain/</link>
      <pubDate>Sat, 17 Aug 2019 09:33:28 +0200</pubDate>
      
      <guid>/doc/domain/</guid>
      <description>A listing of the events can be found here.</description>
    </item>
    
    <item>
      <title>Generating data</title>
      <link>/doc/generating_data/</link>
      <pubDate>Fri, 16 Aug 2019 20:16:54 +0200</pubDate>
      
      <guid>/doc/generating_data/</guid>
      <description>Download the generator You can download the generator for Windows, Mac or Linux.
Move the executable to the base folder where you want to put your code as well and run the generator in a terminal. On both Mac and Windows you might get warnings that the executable is not signed, but you can still run it.
The data The generator will generate 2 files: data/basic.json and data/full.json. You&amp;rsquo;re best to write your code and test with the basic file and then, when everything works, run your projection on the big (almost 2GB) full file.</description>
    </item>
    
  </channel>
</rss>